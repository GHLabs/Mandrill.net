{"name":"Mandrill.net","tagline":"Mandrill api wrapper for .net","body":"Mandrill.net\r\n============\r\n\r\nMandrill api wrapper for .net\r\n\r\n[![Build Status](https://travis-ci.org/feinoujc/Mandrill.net.svg?branch=master)](https://travis-ci.org/feinoujc/Mandrill.net)\r\n\r\n## API Docs\r\n\r\nhttps://mandrillapp.com/api/docs/\r\n\r\n## Getting Started\r\n\r\n```ps\r\nInstall-Package Mandrill.net\r\n```\r\n\r\n### Send a new transactional message through Mandrill\r\n\r\n```cs\r\nvar api = new MandrillApi(\"YOUR_API_KEY_GOES_HERE\");\r\nvar message = new MandrillMessage(\"from@example.com\", \"to@example.com\",\r\n                \"hello mandrill!\", \"...how are you?\");\r\nvar result = await api.Messages.SendAsync(message);\r\n//or non-async (all methods have non-async version)\r\n//var result = api.Messages.Send(message);\r\n```\r\n\r\n### Send a new transactional message through Mandrill using a template\r\n```cs\r\nvar api = new MandrillApi(\"YOUR_API_KEY_GOES_HERE\");\r\nvar message = new MandrillMessage();\r\nmessage.FromEmail = \"no-reply@acme.com\";\r\nmessage.AddTo(\"recipient@example.com\");\r\nmessage.ReplyTo = \"customerservice@acme.com\";\r\n//supports merge var content as string\r\nmessage.AddGlobalMergeVars(\"invoice_date\", DateTime.Now.ToShortDateString());\r\n//or as objects (handlebar templates only)\r\nmessage.AddRcptMergeVars(\"recipient@example.com\", \"invoice_details\", new[]\r\n{\r\n    new Dictionary<string, string>\r\n    {\r\n        {\"sku\", \"apples\"},\r\n        {\"qty\", \"4\"},\r\n        {\"price\", \"0.40\"}\r\n    },\r\n    new Dictionary<string, string>\r\n    {\r\n        {\"sku\", \"oranges\"},\r\n        {\"qty\", \"6\"},\r\n        {\"price\", \"0.30\"}\r\n\r\n    }\r\n});\r\n\r\nvar result = await api.Messages.SendTemplateAsync(message, \"customer-invoice\");\r\n\r\n```\r\n\r\n### Processing a web hook batch\r\n\r\n```cs\r\n[HttpPost]\r\npublic IHttpActionResult MyWebApiControllerMethod(FormDataCollection value)\r\n{\r\n    var events = MandrillMessageEvent.ParseMandrillEvents((value.Get(\"mandrill_events\")));\r\n    foreach (var messageEvent in events)\r\n    {\r\n        //...\r\n    }\r\n    return Ok();\r\n}\r\n```\r\n\r\n## API coverage\r\n\r\n\r\n\r\nSee [this issue](https://github.com/feinoujc/Mandrill.net/issues/1) to track progress of api implementation\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}